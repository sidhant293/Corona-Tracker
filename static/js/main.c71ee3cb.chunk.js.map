{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","serviceWorker.js","index.js","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","App.module.css"],"names":["module","exports","Cards","props","data","confirmed","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","lastUpdate","toDateString","recovered","deaths","url","fetchData","country","a","changeUrl","fetch","resp","json","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","countries","name","Chart","useState","setDailyData","useEffect","fetchApi","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","fetchedCountries","setFetchedCountries","fetchedData","FormControl","formControl","NativeSelect","onChange","onCountryChange","i","key","App","state","e","target","setState","this","style","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c71ee3cb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2NE1a\",\"card\":\"Cards_card__FLGmb\",\"infected\":\"Cards_infected__jHd8n\",\"recovered\":\"Cards_recovered__3bPf6\",\"deaths\":\"Cards_deaths__2T9sb\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = (props) => {\r\n    if (!props.data.confirmed) return 'Loading...';\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify='center'>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Infected</Typography>\r\n                        <Typography variant='h5'><CountUp start={0} end={props.data.confirmed.value} duration={2.5} separator=\",\" /></Typography>\r\n                        <Typography color='textSecondary'>{new Date(props.data.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of active cases</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Recovered</Typography>\r\n                        <Typography variant='h5'><CountUp start={0} end={props.data.recovered.value} duration={2.5} separator=\",\" /></Typography>\r\n                        <Typography color='textSecondary'>{new Date(props.data.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of recovered people</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}>\r\n                    <CardContent>\r\n                        <Typography color='textSecondary' gutterBottom>Deaths</Typography>\r\n                        <Typography variant='h5'><CountUp start={0} end={props.data.deaths.value} duration={2.5} separator=\",\" /></Typography>\r\n                        <Typography color='textSecondary'>{new Date(props.data.lastUpdate).toDateString()}</Typography>\r\n                        <Typography variant='body2'>Number of deaths</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    );\r\n}\r\nexport default Cards;","const url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeUrl = url;\r\n    if (country) changeUrl = `${url}/countries/${country}`;\r\n    try {\r\n        const resp = await fetch(changeUrl);\r\n        const data = await resp.json();\r\n        const modifiedData = {\r\n            confirmed: data.confirmed,\r\n            recovered: data.recovered,\r\n            deaths: data.deaths,\r\n            lastUpdate: data.lastUpdate\r\n        }\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log('error in cards', error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async () => {\r\n    try {\r\n        const resp = await fetch(`${url}/daily`);\r\n        const data = await resp.json();\r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }));\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log('error in daily', error);\r\n    }\r\n}\r\n\r\nexport const countries = async () => {\r\n    try {\r\n        const resp = await fetch(`${url}/countries`);\r\n        const data = await resp.json();\r\n        const countries = data.countries;\r\n        const modifiedData = countries.map((country) => {\r\n            return country.name;\r\n        });\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log('error in countires', error);\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { fetchDailyData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({data,country}) => {\r\n\r\n    const [dailyData, setDailyData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            const dailyData = await fetchDailyData();\r\n            setDailyData(dailyData);\r\n        }\r\n        fetchApi();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length ?\r\n            (<Line\r\n                data={{\r\n                    labels: dailyData.map(({ date }) => date),\r\n                    datasets: [{\r\n                        data: dailyData.map(({ confirmed }) => confirmed),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff',\r\n                        fill: true\r\n                    }, {\r\n                        data: dailyData.map(({ deaths }) => deaths),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red',\r\n                        backgroundColor: 'rgba(255,0,0,0.5)',\r\n                        fill: true\r\n                    }]\r\n                }}\r\n            />) : null\r\n    );\r\n\r\n    const barChart=(\r\n        data.confirmed ?\r\n        (<Bar\r\n            data={{\r\n                labels:['Infected','Recovered','Deaths'],\r\n                datasets:[{\r\n                    label:'People',\r\n                    backgroundColor:['rgba(0,0,255,0.5)','rgba(0,255,0,0.5)','rgba(255,0,0,0.5)'],\r\n                    data:[data.confirmed.value,data.recovered.value,data.deaths.value]\r\n                }]\r\n            }}\r\n            options={{\r\n                legend:{display:false},\r\n                title:{display:true,text:`Current state in ${country}`}\r\n            }}\r\n        />):null\r\n    );\r\n\r\n    return (\r\n        <div className={styles.container}>{country?barChart:lineChart}</div>\r\n    );\r\n}\r\nexport default Chart;","import React, { useState, useEffect } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { countries } from '../../api';\r\n\r\nconst CountryPicker = (props) => {\r\n\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n    useEffect(() => {\r\n        const fetchApi = async () => {\r\n            const fetchedData = await countries();\r\n            setFetchedCountries(fetchedData);\r\n        }\r\n        fetchApi();\r\n    }, [setFetchedCountries]);\r\n\r\n    return (\r\n        <FormControl className={styles.formControl}>\r\n            <NativeSelect onChange={props.onCountryChange}>\r\n                <option value='global'>Global</option>\r\n                {fetchedCountries.map((country, i) => {\r\n                    return <option key={i} value={country}>{country}</option>\r\n                })}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    );\r\n}\r\nexport default CountryPicker;","import React from 'react';\nimport Cards from './components/Cards/Cards';\nimport Chart from './components/Chart/Chart';\nimport CountryPicker from './components/CountryPicker/CountryPicker';\nimport style from './App.module.css';\nimport { fetchData } from './api';\n\nclass App extends React.Component {\n\n  state = {\n    data: {},\n    country: ''\n  }\n\n  async componentDidMount() {\n    const data = await fetchData();\n    this.setState({ data: data });\n  }\n\n  onCountryChange = async (e) => {\n    const country = e.target.value;\n    if (country === 'global') {\n      const data = await fetchData();\n      this.setState({ data: data, country: '' });\n    } else {\n      const data = await fetchData(country);\n      this.setState({ data: data, country: country });\n    }\n  }\n\n  render() {\n    return (\n      <div className={style.container}>\n        <h1>Covid-19 Tracker</h1>\n        <Cards data={this.state.data} />\n        <CountryPicker onCountryChange={this.onCountryChange} />\n        <Chart data={this.state.data} country={this.state.country} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1w3jF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__1BARL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1hMx0\"};"],"sourceRoot":""}